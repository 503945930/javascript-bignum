Scheme arithmetic library for JavaScript,
https://github.com/jtobey/javascript-bignum.
Copyright (c) 2010,2011 John Tobey <John.Tobey@gmail.com>
Copyright (c) 2009 Matthew Crumley <email@matthewcrumley.com>
Licensed under the MIT license, file LICENSE.
Big integer implementation based on javascript-biginteger,
https://github.com/silentmatt/javascript-biginteger.


WHAT IT IS

The Scheme language supports "exact" arithmetic and mixing exact with
inexact numbers.  Several basic operations, including add, subtract,
multiply, and divide, when given only exact arguments, must return an
exact, numerically correct result.  They are allowed to fail due to
running out of memory, but they are not allowed to return
approximations the way ECMAScript operators may.

For example, adding exact 1/100 to exact 0 one hundred times produces
exactly 1, not 1.0000000000000007 as in JavaScript.  Raising 2 to the
1024th power returns a 308-digit integer with complete precision, not
Infinity as in ECMAScript.

This implementation provides all functions listed in the R6RS [1]
Scheme specification, Section 11.7, along with "eqv?" from Section
11.5.  ("eqv?" uses JavaScript's "===" to compare non-numbers.)

Exact numbers support the standard ECMA Number formatting methods
(toFixed, toExponential, and toPrecision) without a fixed upper limit
to precision.


IMPLEMENTATION DETAILS

This version of schemeNumber.js adds properties to the standard
Number.prototype object.  Newer versions (1.2.x) avoid this at
probably some performance cost for inexact numbers.  The added method
names have an "SN_" prefix, are private to the library, and should not
be used by applications.  The same warning appies to all Scheme number
properties whose names begin with "_" or "SN_".

Inexact real numbers are represented as native numbers.

Exact integers of absolute value less than 2 to the 53rd power are
represented as native numbers.  Outside this range, exact integers are
represented as BigInteger objects.

Exact rationals are represented as pairs of exact integers (numerator,
denominator) in lowest terms.

Non-real complex numbers are represented in rectangular coordinates,
either both exact or both inexact.


INSTALLATION

Copy biginteger.js and schemeNumber.js from this directory to your Web
or JavaScript directory.  Load biginteger.js first, then
schemeNumber.js.


USAGE

See documentation in schemeNumber.js, or view it on the Web at
http://john-edwin-tobey.org/Scheme/javascript-bignum/docs/files/schemeNumber-js.html,
or try to extract it to HTML using NaturalDocs [2] and the build-docs
script in this directory.


CHANGES

1.0.11 - 2012-03-16

    * Fixed parser bugs affecting non-decimal radix.

1.0.10 - 2012-03-04

    * Don't let non-ECMA-262 parseInt treat "021" as octal.
    * fn["eqv?"]: as documented, don't try to convert arguments.

1.0.9 - 2011-03-19

    * Fixes backported from 1.1 branch:
    * Make sn("garbage") raise an appropriate exception.
    * Convert fn.atan second argument.
    * Avoid no-such-method in x.valueOf() for complex x.

See file CHANGES for more.

[1] R6RS Scheme specification.  See http://www.r6rs.org/ (I recommend
the PDF, not the HTML version.  http://www.r6rs.org/final/r6rs.pdf),
Section 11.7 (Base library, Arithmetic).

[2] NaturalDocs.  http://www.naturaldocs.org/.
