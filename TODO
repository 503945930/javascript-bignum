TODO:

* Give users control over whether or not we use Number.prototype.

* Make it easy to choose among different implementations of exact
  integers, exact rationals, and complex numbers.

* Consider supporting a configuration where inexact reals are returned
  as primitive numbers but Number.prototype is not used.

* Consider avoiding "for (x in y)" out of concern for Object.prototype
  use.

* BigInteger: Consider having pow() reject non-integer arguments.

* Consider aliasing or renaming BigInteger.toString() so as not to
  conflict with the default toString().

* BigInteger: Consider patching multiplySingleDigit to support
  negative "this".

* Consider a BigDecimal class like Java's BigDecimal.

* Consider creating a framework for selecting implementations of
  BigInteger (and perhaps alternatives to EQFraction or even
  Rectangular).  The library could dynamically measure usage and swap
  implementations on-the-fly to improve performance.
