TODO:

* BigRational: More tests.  Set up input and output files like those
  for BigInteger.

* BigRational: More documentation.

* BigRational: Consider hooking parse() into
  BigInteger.parse's "expandExponential" to support syntax like
  "1.234*10^3" but of course retain fractional parts.

* BigRational: New methods as per the ECMA spec for Number.prototype:
  toLocaleString, toFixed, toExponential, toPrecision.  Consider
  inheriting from Number.

* BigInteger: Consider having pow() reject non-integer arguments.

* Consider aliasing or renaming BigInteger.toString() so as not to
  conflict with the default toString().  Give BigRationalInteger and
  BigRational a similar interface.

* Consider exposing the library version like BigRational.VERSION ===
  BigInteger.VERSION === "1.0"

* SchemeNumber: Consider packaging separately or just dropping
  BigRational.

* SchemeNumber: Finish implementation: expt, transcendentals,
  toString with precision, rationalize, ???, ...

* SchemeNumber: Document.

* SchemeNumber: Test.  Hook up some Scheme test suites?

* SchemeNumber: Offer to HOP.  http://hop.inria.fr/

* This hangs:
  load("schemeNumber.js");
  SchemeNumber._();
  print(".5e-17".toExact().denominator())
